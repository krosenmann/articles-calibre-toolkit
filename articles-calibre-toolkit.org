#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: Плагины для работы со статьями в Calibre
#+DATE: <2018-10-21 Вс>
#+AUTHOR: roman
#+EMAIL: krosenmann@gmail.com
#+LANGUAGE: ru
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 27.0.50 (Org mode 9.1.14)
#+STARTUP: showall
#+PROPERTY: header-args:python :python calibre-debug

* Вступление
  Articles Calibre Toolkit -- набор плагинов Calibre для организации
  работы с научными статьями.
  #+CAPTION: Список плагинов
  #+tblname: plugins
  | Название плагина    | Описание                                       | Тип                 |
  |---------------------+------------------------------------------------+---------------------|
  | Scientific Metadata | Загружает метаданные по DOI статьи из CrossRef | Source              |

* TODO Установка и настройка
   Плагины устанавливаются независимо, и могут быть использованы
   порозонь. Поэтому для установки достаточно скопировать интересующие
   zip-файлы в папку с плагинами Calibre, например
   =~/.config/calibre/plugins= в Ubuntu.

* TODO Как это устроено?
  Каждый плагин Calibre имеет определенную структуру и наследуется от
  некотого базового класса, в зависимости от типа (указан в
  таблице выше).
  Есть общие для всех плагинов аттрибуты, в которых указывается
  имя, описание, версия, информация об авторе и т.д.
  #+name: Информация о наборе
  #+BEGIN_SRC python :exports code
    supported_platforms = ['windows', 'osx', 'linux']
    author = 'Roman Zayrullin'
    version = (0, 0, 1)
    minimum_calibre_version = (3, 0, 0)
  #+END_SRC
  #+name: datamacro
  #+BEGIN_SRC elisp :var plinfo=plugins :var ord=1
    (let ((plugin-info
           (mapcar (lambda (x)
                     (format "class %s(%s):\n    %s"
                             (replace-regexp-in-string " " "" (car x))
                             (caddr x)
                             (format "name = '%s'\n    description = '%s'" (car x) (cadr x))))
                   plinfo)))
      (cond ((equal ord 1) (car plugin-info))
            ((equal ord 2) (cadr plugin-info))))
  #+END_SRC

  #+RESULTS: datamacro
  : class ScientificMetadata(Source)
  :     name = 'Scientific Metadata'
  :     description = 'Загружает метаданные по DOI статьи из CrossRef'

** Поиск и загрузка метаданных 
  Плагин, условно, можно разделить на 2 части:
  + Обработка и выкачивание данных из сети
  + Программно-интерфейсные вещи: чтение информации о публикации из
    Calibre, и запись полученной из сети информации.
*** Скачивание и обработка
    Плагин должен работать только с теми зависимостями, которые ему
    предоставляет Calibre. В этом случае пользователю не нужно будет
    устанавливать ничего дополнительно.
    
    Для поиска информации о статье используется API CrossRef.
    #+name: Импорты для загрузки данных из crossref
    #+BEGIN_SRC python
      import urllib2
      import json
    #+END_SRC

    #+BEGIN_SRC python :noweb-ref Запрашиваем информацию о публикации в Crossref
      def load_info(doi):
          """Function loads article metadata from `https://doi.org` based on doi

          :param doi: doi string
          :returns: dict of raw metadata
          """
          req = urllib2.Request('https://doi.org/{}'.format(doi))
          req.add_header('Accept', 'application/json')
          req.add_header('locale', 'en-US')
          resp = urllib2.urlopen(req)
          publication_info = resp.read()
          return json.loads(publication_info)
    #+END_SRC
    
    doi.org возвращает достаточно громоздкий json с избыточной
    информацией по публикации:
    #+BEGIN_SRC python :noweb yes :python /usr/bin/python :prologue # -*- encoding: utf-8 -*- :results pp :tangle no :exports results
      <<Импорты для загрузки данных из crossref>>
      import __future__

      <<Запрашиваем информацию о публикации в Crossref>>

      return load_info('10.1126/science.169.3946.635')
    #+END_SRC

    #+RESULTS:
    #+begin_example
    {u'DOI': u'10.1126/science.169.3946.635',
     u'ISSN': [u'0036-8075', u'1095-9203'],
     u'URL': u'http://dx.doi.org/10.1126/science.169.3946.635',
     u'author': [{u'affiliation': [],
                  u'family': u'Frank',
                  u'given': u'H. S.',
                  u'sequence': u'first'}],
     u'container-title': u'Science',
     u'container-title-short': u'Science',
     u'content-domain': {u'crossmark-restriction': False, u'domain': []},
     u'created': {u'date-parts': [[2006, 10, 5]],
                  u'date-time': u'2006-10-05T12:56:56Z',
                  u'timestamp': 1160053016000},
     u'deposited': {u'date-parts': [[2020, 2, 5]],
                    u'date-time': u'2020-02-05T16:15:06Z',
                    u'timestamp': 1580919306000},
     u'indexed': {u'date-parts': [[2020, 2, 5]],
                  u'date-time': u'2020-02-05T16:43:08Z',
                  u'timestamp': 1580920988055},
     u'is-referenced-by-count': 73,
     u'issue': u'3946',
     u'issued': {u'date-parts': [[1970, 8, 14]]},
     u'journal-issue': {u'issue': u'3946',
                        u'published-print': {u'date-parts': [[1970, 8, 14]]}},
     u'language': u'en',
     u'link': [{u'URL': u'https://syndication.highwire.org/content/doi/10.1126/science.169.3946.635',
                u'content-type': u'unspecified',
                u'content-version': u'vor',
                u'intended-application': u'similarity-checking'}],
     u'member': u'221',
     u'original-title': [],
     u'page': u'635-641',
     u'prefix': u'10.1126',
     u'published-print': {u'date-parts': [[1970, 8, 14]]},
     u'publisher': u'American Association for the Advancement of Science (AAAS)',
     u'reference-count': 0,
     u'references-count': 0,
     u'relation': {},
     u'score': 1.0,
     u'short-title': [],
     u'source': u'Crossref',
     u'subject': [u'Multidisciplinary'],
     u'subtitle': [],
     u'title': u'The Structure of Ordinary Water: New data and interpretations are yielding new insights into this fascinating substance',
     u'type': u'article-journal',
     u'volume': u'169'}
    #+end_example


*** Подготовка данных для записи в Calibre                              :WIP:
    Для начала установим соответсвия между полями в базе Calibre и
    тем, что возвращает crossref.  Больше всего проблем тут доставляет
    разбор даты публикации, т.к. Calibre ожидает получить ~datetime~
    объект.
    Другое озадачивающее поле -- язык. Для получения корректного
    значения языка для воспользуемся встроенной функцией
    преобразования
    #+name: Дополнительные импорты
    #+BEGIN_SRC python
      from calibre.utils.localization import canonicalize_lang
    #+END_SRC

    #+BEGIN_SRC python :noweb-ref Обработка метаданных
      raw_metadata = load_info(doi)
      data = {}
      data[u'pubdate'] = datetime.datetime(
          year=raw_metadata[u'published-print'][u'date-parts'][0][0],
          month=raw_metadata[u'published-print'][u'date-parts'][0][1])
      data[u'title'] = raw_metadata[u'title']
      data[u'publisher'] = raw_metadata[u'publisher']
      data[u'authors'] = ['{} {}'.format(a[u'given'], a[u'family']) for a in raw_metadata[u'author']]
      data[u'language'] = canonicalize_lang(raw_metadata[u'language'])
    #+END_SRC

    Из еще оставшихся дыр - возможное отстуствие некоторых полей и
    дополнительные ключи (информация из них будет читаться в случае
    провала первого чтения).
    #+caption: Соответствия полей
    #+tblname: fields
    | Calibre   | Habanero  |
    |-----------+-----------|
    | title     | title     |
    | pubdate   | year      |
    | publisher | publisher |
    | authors   | author    |
    | language  | language  |
    #+NAME: Поля БД
    #+BEGIN_SRC python :var fields=fields[,0]
      return "touched_fields = frozenset({})".format(fields)
    #+END_SRC
    
    #+name: Поля публикации
    #+BEGIN_SRC python :var fields=fields[,0] :results code
      return "['" + "', '".join(fields) + "']"
    #+END_SRC

    #+RESULTS: Поля публикации
    #+BEGIN_SRC python
    ['title', 'pubdate', 'publisher', 'authors', 'language']
    #+END_SRC

    #+RESULTS: Преобразование полей
    : result = {
    : 'title': data[0]['title'],
    : 'pubdate': datetime.datetime(year=data[0]['year'], month=1, day=1),
    : 'publisher': data[0]['publisher'],
    : 'authors': data[0]['author'].split(' and '),
    : 'language': canonicalize_lang(data[0]['language'])}

    #+NAME: Запись метаданных в БД
    #+BEGIN_SRC python :noweb no-export
      mi = Metadata(data["title"], data["authors"])
      for attr in <<Поля публикации()>>:
          if hasattr(mi, attr) and attr in data:
              setattr(mi, attr, data[attr])

      mi.print_all_attributes()
      self.clean_downloaded_metadata(mi)
      result_queue.put(mi)
    #+END_SRC

    Теперь можно загружать данные и преобразовывать их к нужному виду.

*** Программно-интерфейсные вещи    
  Для плагинов метаданных в Calibre переопределяется метод ~identify~,
  в который уже передается большая часть нужной информации и все
  необходимые для загрузки интерфейсы. Все, что нужно здесь сделать:
  корректно вызвать необходимые методы и передать DOI функции загрузки
  для, непосредственно, загрузки.
  Для целостности пакавана, выясним, является ли записанный в БД
  Calibre DOI корректным, и можно просить habanero найти информацию о
  нужных нам статьях.
  Для валидации doi используем [[http://stackoverflow.com/questions/27910/finding-a-doi-in-a-document-or-page][регулярку]]
  #+BEGIN_SRC python :noweb-ref Дополнительные импорты
    import re
    import datetime
  #+END_SRC

  #+name: Утилиты
  #+BEGIN_SRC python
    def is_valid(s):
        return re.match(r'\s*(10[.][0-9]{3,}(?:[.][0-9]+)*/(?:(?!["&\'<>])\S)+)\b', s)
  #+END_SRC
  
  #+BEGIN_SRC python :noweb yes :tangle ScientificMetadata/__init__.py
    <<Дополнительные импорты>>
    <<Импорты для загрузки данных из crossref>>
    from calibre.ebooks.metadata.sources.base import Source
    from calibre.ebooks.metadata.book.base import Metadata


    <<Запрашиваем информацию о публикации в Crossref>>


    <<Утилиты>>


    <<datamacro(ord=1)>>
        <<Информация о наборе>>
        <<Поля БД()>>

        def identify(self, log, result_queue, abort,
                     title=None, authors=None, identifiers={}, timeout=30):
            doi = identifiers.get("doi", "")
            if not (doi and is_valid(doi)):
                return None
            <<Обработка метаданных>>
            if not data:
                return None
            <<Запись метаданных в БД>>
  #+END_SRC

